var documenterSearchIndex = {"docs":
[{"location":"material/#Material","page":"Material","title":"Material","text":"","category":"section"},{"location":"material/#Material-2","page":"Material","title":"Material","text":"","category":"section"},{"location":"material/","page":"Material","title":"Material","text":"Material\nMaterial(path::String)\nMaterial(shelf::String, book::String, page::String)\nMaterial(n::Real, name::String)\nMaterial(n::Real, k::Real, name::String)\nMaterial(; k::Real, name::String)","category":"page"},{"location":"material/#Refraction.Material","page":"Material","title":"Refraction.Material","text":"struct Material{MD<:MaterialData}\n    name::String\n    materialdata::MD\n    wavelength_range::Tuple{Float64,Float64}\nend\n\nA material stores:\n\nname::String : The name of the material, which is the path to the material in the database or a custom name when creating your own materials\nmaterialdata::{<:MaterialData} : The material data, i.e the refractive index data and extinction coefficient data\nwavelength::Tuple{Float64, Float64} : The wavelength range of the material data\n\ninfo: Info\nNot every material in the database contains refractive indices and extinction coefficients. Some materials only contain refractive indices, while others only contain extinction coefficients.\n\nThe material object acts as a functor to compute the refractive index of the material for a given wavelength\n\n(m::Material)(wavelength::Real; [, default::Real=0.0])\n\nMore information about the Functor method can be found here Material(wavelength::Real; default::Real)\n\n\n\n\n\n","category":"type"},{"location":"material/#Refraction.Material-Tuple{String}","page":"Material","title":"Refraction.Material","text":"Material(path::String) -> Union{Material, Vector{Material}\n\nCreates a material from the given path in the refractive index database. This method will throw an ArgumentError if the given path does not correspond to a material in the database.\n\nArguments\n\npath::String : The path to the material given in the format \"<shelf>/<book>/<page>\"\n\nReturns\n\nUnion{Material, Vector{Material} : The material object(s) created from the given path. The method returns a vector of material objects if the page at the given path contains multiple material datasets.\n\n\n\n\n\n","category":"method"},{"location":"material/#Refraction.Material-Tuple{String, String, String}","page":"Material","title":"Refraction.Material","text":"Material(shelf, book, page) -> Union{Material, Vector{Material}}\n\nProvide the shelf, book and page of the material separately. This method then calls Material(\"$shelf/$book/$page\").\n\nArguments\n\nshelf::String : The shelf of the material\nbook::String : The book of the material\npage::String : The page of the material\n\n\n\n\n\n","category":"method"},{"location":"material/#Refraction.Material-Tuple{Real, String}","page":"Material","title":"Refraction.Material","text":"Material(n::Real [,name::String=\"unnamed\"]) -> Material\n\nConstruct a material with a constant index of refraction over the entire wavelength range. By default the material will be given the name \"unnamed\".\n\n\n\n\n\n","category":"method"},{"location":"material/#Refraction.Material-Tuple{Real, Real, String}","page":"Material","title":"Refraction.Material","text":"Material(shelf, book, page) -> Union{Material, Vector{Material}}\n\nProvide the shelf, book and page of the material separately. This method then calls Material(\"$shelf/$book/$page\").\n\nArguments\n\nshelf::String : The shelf of the material\nbook::String : The book of the material\npage::String : The page of the material\n\n\n\n\n\nMaterial(n::Real, k::Real [, name::String=\"unnamed\"]) -> Material\n\nConstruct a material with a constant index of refraction and extinction coefficient over the entire wavelength range. By default the material will be given the name \"unnamed\".\n\n\n\n\n\n","category":"method"},{"location":"material/#Refraction.Material-Tuple{}","page":"Material","title":"Refraction.Material","text":"Material(; k::Real [, name::String=\"unnamed\"]) -> Material\n\nConstruct a material with a constant index of refraction and extinction coefficient over the entire wavelength range. By default the material will be given the name \"unnamed\".\n\n\n\n\n\n","category":"method"},{"location":"material/#Finding-Materials","page":"Material","title":"Finding Materials","text":"","category":"section"},{"location":"material/","page":"Material","title":"Material","text":"findmaterial","category":"page"},{"location":"material/#Refraction.findmaterial","page":"Material","title":"Refraction.findmaterial","text":"findmaterial(name::Regex) -> Vector{String}\n\nSearch for materials in the database that match the given regular expression. The method returns a vector of paths to the materials that startswith the regular expression. The search is case-insensitive.\n\nArguments\n\nname::Regex : The regular expression that the method will match to the start of the material paths.\n\n\n\n\n\nfindmaterial(name::String) -> Vector{String}\n\nArguments\n\nname::String : The name of the material to search for in the database. The name can be written in the format \"<shelf>/<book>/<page>\" or using spaces instead of forward slashes.\n\n\n\n\n\n","category":"function"},{"location":"material/#Null-Material","page":"Material","title":"Null Material","text":"","category":"section"},{"location":"material/","page":"Material","title":"Material","text":"NULL_MATERIAL\nisnullmaterial","category":"page"},{"location":"material/#Refraction.NULL_MATERIAL","page":"Material","title":"Refraction.NULL_MATERIAL","text":"const NULL_MATERIAL = Material(NaN, \"null\")\n\nMaterial object that defines the null material. The null material is defined as a material with name \"null\" and a constant refractive index of NaN over the entire wavelength range.\n\n\n\n\n\n","category":"constant"},{"location":"material/#Refraction.isnullmaterial","page":"Material","title":"Refraction.isnullmaterial","text":"isnullmaterial(m::Material) -> Bool\n\nCheck if the given material is the null material. The method returns true if the material is the null material, otherwise it returns false.\n\n\n\n\n\n","category":"function"},{"location":"material/#Refractive-Index","page":"Material","title":"Refractive Index","text":"","category":"section"},{"location":"material/","page":"Material","title":"Material","text":"Material(wavelength::Real; default::Real)\ndispersion","category":"page"},{"location":"material/#Refraction.Material-Tuple{Real}","page":"Material","title":"Refraction.Material","text":"(m::Material)(wavelength::Real; [default::Real=1.0]) -> Real\n\nFunctor method to compute the refractive index of the material for a given wavelength. If the wavelength is outside the wavelength range of the material the method will clamp the wavelength to the range. In the case that the material does not contain data on the refractive indices of the material the method will return the default value. The functor method calls the dispersion method.\n\nArguments\n\nm::Material : The material object for which the refractive index is to be computed.\nwavelength::Real : The wavelength at which the refractive index is to be computed given in mu m.\ndefault::Real=1.0 : The default value to return if the material does not contain data on refractive indices\n\n\n\n\n\n","category":"method"},{"location":"material/#Refraction.dispersion","page":"Material","title":"Refraction.dispersion","text":"dispersion(m::Material, wavelength::Real; [default::Real=1.0]) -> Real\n\nCompute the refractive index of the material for a given wavelength. If the wavelength is outside the wavelength range of the material the method will clamp the wavelength to the range. In the case that the material does not contain data on the refractive indices of the material the method will return the default value.\n\nArguments\n\nm::Material : The material object for which the refractive index is to be computed.\nwavelength::Real : The wavelength at which the refractive index is to be computed given in mu m.\ndefault::Real=1.0 : The default value to return if the material does not contain data on refractive indices\n\n\n\n\n\n","category":"function"},{"location":"material/#Extinction-Coefficient","page":"Material","title":"Extinction Coefficient","text":"","category":"section"},{"location":"material/","page":"Material","title":"Material","text":"extinction\ntransmittance","category":"page"},{"location":"material/#Refraction.extinction","page":"Material","title":"Refraction.extinction","text":"extinction(m::Material, wavelength::Real; [default::Float64=0.0]) -> Real\n\nCompute the extinction coefficient of the material for a given wavelength. If the wavelength is outside the wavelength range of the material the method will clamp the wavelength to the range. In the case that the material does not contain data on the extinction coefficient of the material the method will return the default value.\n\nArguments\n\nm::Material : The material object for which the extinction coefficient is to be computed.\nwavelength::Real : The wavelength at which the extinction coefficient is to be computed given in mu m.\ndefault::Float64=0.0 : The default value to return if the material does not contain data on extinction coefficients\n\n\n\n\n\n","category":"function"},{"location":"material/#Refraction.transmittance","page":"Material","title":"Refraction.transmittance","text":"transmittance(m::Material, wavelength::Real, distance::Real; [default::Real=0.0]) -> Real\n\nCompute the transmittance of the material for a given wavelength and distance\n\nArguments\n\nm::Material : The material object\nwavelength::Real : The wavelength at which the transmittance is to be computed given in mu m.\ndistance::Real : The distance over which the transmittance is to be computed given in mu m.\ndefault::Real=0.0 : The default value to return for the extinction coefficient if the material does not contain data on extinction coefficients\n\n\n\n\n\n","category":"function"},{"location":"#Refraction.jl","page":"Refraction.jl","title":"Refraction.jl","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"using Refraction","category":"page"},{"location":"#Initialisation","page":"Refraction.jl","title":"Initialisation","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"When using the package for the first time the package will download the latest version of the database and create a local cache, in the data folder of the package directory. The database is only downloaded when the data folder does not contain the necessary files for the package to work correctly.","category":"page"},{"location":"#Creating-Materials","page":"Refraction.jl","title":"Creating Materials","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"You can load a given material from the database using the Material function. The function takes a shelf, book, and page as parameters.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"sio2 = Material(\"main\", \"SiO2\", \"Malitson\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"This constructs an instance of Material, which contains the name of the material, the wavelength range, and the dispersion formula to calculate the refractive index of the material for a given wavelength.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"You can also speficy the shelf, book and page as a path","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"sio2 = Material(\"main/SiO2/Malitson\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"The package also allows you to define materials that have a constant refractive index over all wavelengths, which is convenient for definings materials such as vaccuum. You can create a material with a constant refractive index using the Material function by passing a name and a refractive index as parameters.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"vacuum_n = Material(1.0, \"vacuum\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"If you want you can omit the name of the material and the material will be saved as \"unnamed\". You can similarly create a material with a constant extinction coefficient","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"dampner = Material(; k=0.1, name=\"dampner\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"or constant refractive index and extinction coefficient","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"vacuum = Material(1.0, 0.0, \"vacuum\")","category":"page"},{"location":"#Finding-Materials","page":"Refraction.jl","title":"Finding Materials","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"Since it can be difficult to remember the exact paths to the materials in the database, we provide a function findmaterial that allows you to search for a material by providing a partial path string or a regex pattern. The search for the material is case-insensitive. You can either write the path using slashes","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"findmaterial(\"main/SiO2\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"or with spaces in between the shelf, book, and page","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"findmaterial(\"main SiO2\")","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"This function returns a list of paths that start with the search pattern. You can then use the Material function to load the material you want.","category":"page"},{"location":"#Computing-Refractive-Index","page":"Refraction.jl","title":"Computing Refractive Index","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"Once you have an instance of Material you can call it as a functor with a specific wavelength to compute its refractive index. Note that the wavelengths must be given in mu m. We will use the SiO2 material from above as an example.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"n = sio2(0.5)","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"When calling the material as a functor, this is actually just syntactic sugar for calling","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"n = dispersion(sio2, 0.5)","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"When the given wavelength is outside of the wavelength range, we will issue a warning that the wavelength is outside of the range and that we are calling the clamp function to return a refractive index at the closest wavelength in the range.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"n = sio2(0.1)\nprintln(n) # hide","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"However, if you try to compute the refractive index of a material for a given wavelength that does not contain data on the refractive indices the function will return a default value which is 1.0 by default.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"n = dampner(0.1)\nprintln(n) # hide","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"You can also change the default value by passing a keyword argument to the function.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"n = dampner(0.1, default=0.0)\nprintln(n) # hide","category":"page"},{"location":"#Computing-Extinction-Coefficient","page":"Refraction.jl","title":"Computing Extinction Coefficient","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"You can also compute the extinction coefficient of a material for a given wavelength by calling the extinction function with the material and the wavelength as parameters. Note that the wavelengths must be given in mu m.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"au = Material(\"main\", \"Au\", \"Johnson\")\nk = extinction(au, 0.5)","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"This function will return the extinction coefficient of the material at the given wavelength. Similar to the refractive index, if the given wavelength is outside of the wavelength range, we will issue a warning that the wavelength is outside of the range and that we are calling the clamp function to return an extinction coefficient at the closest wavelength in the range.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"k = extinction(au, 0.1)\nprintln(k) # hide","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"If the material does not contain data on the extinction coefficients the function will return a default value which is 0.0 by default.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"k = extinction(vacuum_n,0.1)\nprintln(k) # hide","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"You can also change the default value by passing a keyword argument to the function.","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"k = extinction(vacuum_n,0.1, default=1.0)\nprintln(k) # hide","category":"page"},{"location":"#Update-local-database","page":"Refraction.jl","title":"Update local database","text":"","category":"section"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"The package also allows you the local version of the refractiveindex.info database by calling the update_cache function with the url of the database. By writing the following","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"Refractive.update_cache(<url>)","category":"page"},{"location":"","page":"Refraction.jl","title":"Refraction.jl","text":"where the url is the link to the zip file of the database on refractiveindex.info. The package will download the specified database and replace the previous version of the database that is stored locally.","category":"page"}]
}
